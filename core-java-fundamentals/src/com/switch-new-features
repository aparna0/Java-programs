//brawbacks of old switch:
  1. doesn't support multiple values to switch case
  2. default fall down through default( break statement is compulsory to breake case then it will execute further cases also)

//new features in java 13
  1. allows case multiple values.
  2. switch can we used as a expression, i.e we can pass input value and switch will process it and retunr output value.
  3. either :yield or -> is used to return value from switch case and no need to write break statement.
  4. when you writing switch case as a expression, it is mandatory give semicolon and write default case.
  5. after -> we can write {}, throw exeption and statement/ expression

  import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
       		 int ch =1;
        
        //old - single value in case and default fall down if no break is written
        switch(ch){
            case 1:
                System.out.println("one");
                break;
            case 2: System.out.println("two");
        }
        
        //---------------------------- new ----------------------------
        
        //multiple values in single case
         switch(ch){
            case 1,2:
                System.out.println("one");
                break;
            case 3: System.out.println("two");
        }
        
         switch("ruchita"){
            case "aparna","ruchita":
                System.out.println("employed");
                break;
            case "shreya": System.out.println("Unemployed");
        }
        
        //use -> to avoid break 
        switch(ch){
            case 1,2 ->System.out.println("one");
            case 3 -> System.out.println("two"); 
        }
        
        //use -> to write switch as a expression
        //; and default is compulsory for switch expression
        String out =  switch(ch){
             case 1,2 -> "one";
            case 3 -> "two";
            default -> throw new IllegalArgumentException();
        };
        System.out.println(out);
        
        //use yield to return value in old switch case
        out =  switch(ch){
             case 1,2: yield "one";
            case 3: yield "two";
            default: throw new IllegalArgumentException();
        };
        System.out.println(out);
        
        //use yield to return value in -> block with multiple statement
        out =  switch(ch){
             case 1,2 ->{
                 System.out.println("this is block case");
                 yield "one";
             }
             case 3 -> "two";
            default-> throw new IllegalArgumentException();
        };
        System.out.println(out);
	}
}
